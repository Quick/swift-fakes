{
  "abstract" : [
    {
      "text" : "Pendable is a safe way to represent the 2 states that an asynchronous call can be in",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Fakes\/documentation\/Fakes"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:5Fakes8PendableC",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "class"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "Pendable"
      }
    ],
    "modules" : [
      {
        "name" : "Fakes"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "Pendable"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Class",
    "symbolKind" : "class",
    "title" : "Pendable"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "Linux"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "final"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "class"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "Pendable"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "Value"
            },
            {
              "kind" : "text",
              "text" : "> "
            },
            {
              "kind" : "keyword",
              "text" : "where"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Value"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:s8SendableP",
              "text" : "Sendable"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "pending",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", the state while waiting for the call to finish.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "finished",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", the state once the call has finished.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Pendable allows you to finish a pending call after it’s been made. This makes Pendable behave very",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "similarly to something like Combine’s ",
              "type" : "text"
            },
            {
              "code" : "Future",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The reason you must provide a fallback value is to prevent deadlock when used in test.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Unlike something like Combine’s ",
                  "type" : "text"
                },
                {
                  "code" : "Future",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", it is very often the case that you will write",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "tests which end while the call is in the pending state. If you do this too much, then your",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "entire test suite will deadlock, as Swift Concurrency works under the assumption that",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "blocked tasks of work will always eventually be unblocked. To help prevent this, pending calls",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "are always resolved with the fallback after a given delay. You can also manually force this",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "by calling the ",
                  "type" : "text"
                },
                {
                  "code" : "Pendable\\resolveWithFallback()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " method.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/ResolvableWithFallback",
        "doc:\/\/Fakes\/s8SendableP"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/init(fallbackValue:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/call(fallbackDelay:)",
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/call(resolveDelay:)",
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/reset()",
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/resolve(with:)",
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/resolveWithFallback()"
      ],
      "title" : "Instance Methods"
    },
    {
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/finished()",
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/finished(_:)",
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/pending()-1auk9",
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/pending()-4kz6d",
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/pending()-r0sx",
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/pending(fallback:)"
      ],
      "title" : "Type Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/fakes\/pendable"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Fakes/documentation/Fakes": {
  "abstract" : [
    {
      "inlineContent" : [
        {
          "text" : "Swift Fakes",
          "type" : "text"
        }
      ],
      "type" : "strong"
    },
    {
      "text" : " is an open source collection of Test Doubles for Swift",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Fakes",
  "type" : "topic",
  "url" : "\/documentation\/fakes"
},
"doc://Fakes/documentation/Fakes/Pendable": {
  "abstract" : [
    {
      "text" : "Pendable is a safe way to represent the 2 states that an asynchronous call can be in",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Pendable"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Pendable"
    }
  ],
  "role" : "symbol",
  "title" : "Pendable",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable"
},
"doc://Fakes/documentation/Fakes/Pendable/call(fallbackDelay:)": {
  "abstract" : [
    {
      "text" : "Gets the value for the ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : ", possibly waiting until it’s resolved.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "call"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "fallbackDelay"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10Foundation12TimeIntervala",
      "text" : "TimeInterval"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/call(fallbackDelay:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "call(fallbackDelay:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/call(fallbackdelay:)"
},
"doc://Fakes/documentation/Fakes/Pendable/call(resolveDelay:)": {
  "abstract" : [
    {
      "text" : "Gets or throws value for the ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : ", possibly waiting until it’s resolved.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Sendable",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "call"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Success"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "Failure"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "externalParam",
      "text" : "resolveDelay"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10Foundation12TimeIntervala",
      "text" : "TimeInterval"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "async"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Success"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/call(resolveDelay:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "call(resolveDelay:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/call(resolvedelay:)"
},
"doc://Fakes/documentation/Fakes/Pendable/finished()": {
  "abstract" : [
    {
      "text" : "Creates a new finished ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : " pre-resolved  with Void.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Sendable",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "finished"
    },
    {
      "kind" : "text",
      "text" : "() -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes8PendableC",
      "text" : "Pendable"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/finished()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "finished()",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/finished()"
},
"doc://Fakes/documentation/Fakes/Pendable/finished(_:)": {
  "abstract" : [
    {
      "text" : "Creates a new finished ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : " pre-resolved with the given value.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Sendable",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "finished"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes8PendableC",
      "text" : "Pendable"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/finished(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "finished(_:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/finished(_:)"
},
"doc://Fakes/documentation/Fakes/Pendable/init(fallbackValue:)": {
  "abstract" : [
    {
      "text" : "Initializes a new ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : ", in a pending state, with the given fallback value.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "fallbackValue"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/init(fallbackValue:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(fallbackValue:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/init(fallbackvalue:)"
},
"doc://Fakes/documentation/Fakes/Pendable/pending()-1auk9": {
  "abstract" : [
    {
      "text" : "Creates a new pending ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : " with a fallback value of nil.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Sendable",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "pending"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Wrapped"
    },
    {
      "kind" : "text",
      "text" : ">() -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes8PendableC",
      "text" : "Pendable"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/pending()-1auk9",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "pending()",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/pending()-1auk9"
},
"doc://Fakes/documentation/Fakes/Pendable/pending()-4kz6d": {
  "abstract" : [
    {
      "text" : "Creatse a new pending ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : " with a fallback value of an error.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Sendable",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "pending"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Success"
    },
    {
      "kind" : "text",
      "text" : ">() -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes8PendableC",
      "text" : "Pendable"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/pending()-4kz6d",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "pending()",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/pending()-4kz6d"
},
"doc://Fakes/documentation/Fakes/Pendable/pending()-r0sx": {
  "abstract" : [
    {
      "text" : "Creates a new pending ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : " with a fallback value of Void.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Sendable",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "pending"
    },
    {
      "kind" : "text",
      "text" : "() -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes8PendableC",
      "text" : "Pendable"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/pending()-r0sx",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "pending()",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/pending()-r0sx"
},
"doc://Fakes/documentation/Fakes/Pendable/pending(fallback:)": {
  "abstract" : [
    {
      "text" : "Creates a new pending ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : " with the given fallback value.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "Value",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Sendable",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "pending"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "fallback"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes8PendableC",
      "text" : "Pendable"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/pending(fallback:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "pending(fallback:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/pending(fallback:)"
},
"doc://Fakes/documentation/Fakes/Pendable/reset()": {
  "abstract" : [
    {
      "text" : "Resolves any outstanding calls to the ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : " with the current value,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and resets it back into the pending state.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "reset"
    },
    {
      "kind" : "text",
      "text" : "()"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/reset()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "reset()",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/reset()"
},
"doc://Fakes/documentation/Fakes/Pendable/resolve(with:)": {
  "abstract" : [
    {
      "text" : "Resolves the ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : " with the given value.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "resolve"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "with"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Value"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/resolve(with:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "resolve(with:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/resolve(with:)"
},
"doc://Fakes/documentation/Fakes/Pendable/resolveWithFallback()": {
  "abstract" : [
    {
      "text" : "Resolves the ",
      "type" : "text"
    },
    {
      "code" : "Pendable",
      "type" : "codeVoice"
    },
    {
      "text" : " with the fallback value.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "resolveWithFallback"
    },
    {
      "kind" : "text",
      "text" : "()"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable\/resolveWithFallback()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "resolveWithFallback()",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable\/resolvewithfallback()"
},
"doc://Fakes/documentation/Fakes/ResolvableWithFallback": {
  "abstract" : [
    {
      "text" : "A way to type-erase Pendable, specifically just for resolving with the fallback.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ResolvableWithFallback"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/ResolvableWithFallback",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ResolvableWithFallback"
    }
  ],
  "role" : "symbol",
  "title" : "ResolvableWithFallback",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/resolvablewithfallback"
},
"doc://Fakes/s8SendableP": {
  "identifier" : "doc:\/\/Fakes\/s8SendableP",
  "title" : "Swift.Sendable",
  "type" : "unresolvable"
}
}
}