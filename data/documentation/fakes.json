{
  "abstract" : [
    {
      "inlineContent" : [
        {
          "text" : "Swift Fakes",
          "type" : "text"
        }
      ],
      "type" : "strong"
    },
    {
      "text" : " is an open source collection of Test Doubles for Swift",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [

      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Fakes\/documentation\/Fakes"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "Fakes",
    "modules" : [
      {
        "name" : "Fakes"
      }
    ],
    "role" : "collection",
    "roleHeading" : "Framework",
    "symbolKind" : "module",
    "title" : "Fakes"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Fakes aims to provide easy-to-use and powerful test double infrastructure for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Currently, Fakes offers the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Spy",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " object.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Terms",
          "level" : 2,
          "text" : "Terms",
          "type" : "heading"
        },
        {
          "items" : [
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "Any object used to replace a production object for testing purposes.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "text" : "Test Double",
                    "type" : "text"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "A non-production implementation of a protocol.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "text" : "Fake",
                    "type" : "text"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "A test double that records calls to a method, and returns a preconfigured response.",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "text" : "Spy",
                    "type" : "text"
                  }
                ]
              }
            },
            {
              "definition" : {
                "content" : [
                  {
                    "inlineContent" : [
                      {
                        "text" : "A generic term for the object being tested. See ",
                        "type" : "text"
                      },
                      {
                        "identifier" : "https:\/\/github.com\/testdouble\/contributing-tests\/wiki\/Subject",
                        "isActive" : true,
                        "type" : "reference"
                      },
                      {
                        "text" : ".",
                        "type" : "text"
                      }
                    ],
                    "type" : "paragraph"
                  }
                ]
              },
              "term" : {
                "inlineContent" : [
                  {
                    "text" : "Subject",
                    "type" : "text"
                  }
                ]
              }
            }
          ],
          "type" : "termList"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/DependencyInjection",
        "doc:\/\/Fakes\/documentation\/Fakes\/NimbleIntegration",
        "doc:\/\/Fakes\/documentation\/Fakes\/VerifyingCallbacks"
      ],
      "title" : "Articles"
    },
    {
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/Pendable",
        "doc:\/\/Fakes\/documentation\/Fakes\/PendableDefaults",
        "doc:\/\/Fakes\/documentation\/Fakes\/Spy"
      ],
      "title" : "Classes"
    },
    {
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/ResolvableWithFallback"
      ],
      "title" : "Protocols"
    },
    {
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/EmptyError"
      ],
      "title" : "Structures"
    },
    {
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/beCalled(_:)-7sn1o",
        "doc:\/\/Fakes\/documentation\/Fakes\/beCalled(_:)-82qlg",
        "doc:\/\/Fakes\/documentation\/Fakes\/beCalled(_:times:)-6125c",
        "doc:\/\/Fakes\/documentation\/Fakes\/beCalled(_:times:)-9320x",
        "doc:\/\/Fakes\/documentation\/Fakes\/mostRecentlyBeCalled(_:)-91ves",
        "doc:\/\/Fakes\/documentation\/Fakes\/mostRecentlyBeCalled(_:)-9i9t9"
      ],
      "title" : "Functions"
    },
    {
      "identifiers" : [
        "doc:\/\/Fakes\/documentation\/Fakes\/PendableSpy",
        "doc:\/\/Fakes\/documentation\/Fakes\/ThrowingDynamicPendable",
        "doc:\/\/Fakes\/documentation\/Fakes\/ThrowingPendable",
        "doc:\/\/Fakes\/documentation\/Fakes\/ThrowingPendableSpy",
        "doc:\/\/Fakes\/documentation\/Fakes\/ThrowingSpy"
      ],
      "title" : "Type Aliases"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/fakes"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Fakes/documentation/Fakes": {
  "abstract" : [
    {
      "inlineContent" : [
        {
          "text" : "Swift Fakes",
          "type" : "text"
        }
      ],
      "type" : "strong"
    },
    {
      "text" : " is an open source collection of Test Doubles for Swift",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Fakes",
  "type" : "topic",
  "url" : "\/documentation\/fakes"
},
"doc://Fakes/documentation/Fakes/DependencyInjection": {
  "abstract" : [
    {
      "text" : "Providing dependencies instead of reaching out to them.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/DependencyInjection",
  "kind" : "article",
  "role" : "article",
  "title" : "Dependency Injection",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/dependencyinjection"
},
"doc://Fakes/documentation/Fakes/EmptyError": {
  "abstract" : [
    {
      "text" : "An error that can be used as a default error in tests",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "EmptyError"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/EmptyError",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "EmptyError"
    }
  ],
  "role" : "symbol",
  "title" : "EmptyError",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/emptyerror"
},
"doc://Fakes/documentation/Fakes/NimbleIntegration": {
  "abstract" : [
    {
      "text" : "Nimble Matchers to make asserting on ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Spy",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " significantly nicer.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/NimbleIntegration",
  "kind" : "article",
  "role" : "article",
  "title" : "Nimble Integration",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/nimbleintegration"
},
"doc://Fakes/documentation/Fakes/Pendable": {
  "abstract" : [
    {
      "text" : "Pendable is a safe way to represent the 2 states that an asynchronous call can be in",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Pendable"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Pendable",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Pendable"
    }
  ],
  "role" : "symbol",
  "title" : "Pendable",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendable"
},
"doc://Fakes/documentation/Fakes/PendableDefaults": {
  "abstract" : [
    {
      "text" : "Default values for use with Pendable.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "PendableDefaults"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/PendableDefaults",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "PendableDefaults"
    }
  ],
  "role" : "symbol",
  "title" : "PendableDefaults",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendabledefaults"
},
"doc://Fakes/documentation/Fakes/PendableSpy": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "PendableSpy"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/PendableSpy",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "PendableSpy"
    }
  ],
  "role" : "symbol",
  "title" : "PendableSpy",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/pendablespy"
},
"doc://Fakes/documentation/Fakes/ResolvableWithFallback": {
  "abstract" : [
    {
      "text" : "A way to type-erase Pendable, specifically just for resolving with the fallback.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ResolvableWithFallback"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/ResolvableWithFallback",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ResolvableWithFallback"
    }
  ],
  "role" : "symbol",
  "title" : "ResolvableWithFallback",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/resolvablewithfallback"
},
"doc://Fakes/documentation/Fakes/Spy": {
  "abstract" : [
    {
      "text" : "A Spy is a test double for recording calls to methods, and returning stubbed results.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Spy"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Spy",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Spy"
    }
  ],
  "role" : "symbol",
  "title" : "Spy",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/spy"
},
"doc://Fakes/documentation/Fakes/ThrowingDynamicPendable": {
  "abstract" : [

  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ThrowingDynamicPendable"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/ThrowingDynamicPendable",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ThrowingDynamicPendable"
    }
  ],
  "role" : "symbol",
  "title" : "ThrowingDynamicPendable",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/throwingdynamicpendable"
},
"doc://Fakes/documentation/Fakes/ThrowingPendable": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ThrowingPendable"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/ThrowingPendable",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ThrowingPendable"
    }
  ],
  "role" : "symbol",
  "title" : "ThrowingPendable",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/throwingpendable"
},
"doc://Fakes/documentation/Fakes/ThrowingPendableSpy": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ThrowingPendableSpy"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/ThrowingPendableSpy",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ThrowingPendableSpy"
    }
  ],
  "role" : "symbol",
  "title" : "ThrowingPendableSpy",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/throwingpendablespy"
},
"doc://Fakes/documentation/Fakes/ThrowingSpy": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ThrowingSpy"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/ThrowingSpy",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ThrowingSpy"
    }
  ],
  "role" : "symbol",
  "title" : "ThrowingSpy",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/throwingspy"
},
"doc://Fakes/documentation/Fakes/VerifyingCallbacks": {
  "abstract" : [
    {
      "text" : "When testing a method that calls a callback, how do you verify that the",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "callback actually works?",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/VerifyingCallbacks",
  "kind" : "article",
  "role" : "article",
  "title" : "Verifying Callbacks and Faking DispatchQueue",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/verifyingcallbacks"
},
"doc://Fakes/documentation/Fakes/beCalled(_:)-7sn1o": {
  "abstract" : [
    {
      "text" : "A Nimble matcher for ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Spy",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " that succeeds when any of the calls to the spy are equal to the given value.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "beCalled"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble7MatcherV",
      "text" : "Matcher"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes3SpyC",
      "text" : "Spy"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">>"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/beCalled(_:)-7sn1o",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "beCalled(_:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/becalled(_:)-7sn1o"
},
"doc://Fakes/documentation/Fakes/beCalled(_:)-82qlg": {
  "abstract" : [
    {
      "text" : "A Nimble matcher for ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Spy",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " that succeeds when any of the calls to the spy matches the given matchers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "beCalled"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble7MatcherV",
      "text" : "Matcher"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ">...) -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble7MatcherV",
      "text" : "Matcher"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes3SpyC",
      "text" : "Spy"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">>"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/beCalled(_:)-82qlg",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "beCalled(_:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/becalled(_:)-82qlg"
},
"doc://Fakes/documentation/Fakes/beCalled(_:times:)-6125c": {
  "abstract" : [
    {
      "text" : "A nimble matcher for ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Spy",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " that succeeds when the spy has been called",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "times",
      "type" : "codeVoice"
    },
    {
      "text" : " times, and it has been called at least once with arguments that match",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "the matcher.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "beCalled"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble7MatcherV",
      "text" : "Matcher"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ">..., "
    },
    {
      "kind" : "externalParam",
      "text" : "times"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble7MatcherV",
      "text" : "Matcher"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes3SpyC",
      "text" : "Spy"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">>"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/beCalled(_:times:)-6125c",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "beCalled(_:times:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/becalled(_:times:)-6125c"
},
"doc://Fakes/documentation/Fakes/beCalled(_:times:)-9320x": {
  "abstract" : [
    {
      "text" : "A Nimble matcher for ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Spy",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " that succeeds when the spy has been called ",
      "type" : "text"
    },
    {
      "code" : "times",
      "type" : "codeVoice"
    },
    {
      "text" : " times,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "and at least one of those calls is equal to the given value.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "beCalled"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "times"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble7MatcherV",
      "text" : "Matcher"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes3SpyC",
      "text" : "Spy"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">>"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/beCalled(_:times:)-9320x",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "beCalled(_:times:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/becalled(_:times:)-9320x"
},
"doc://Fakes/documentation/Fakes/mostRecentlyBeCalled(_:)-91ves": {
  "abstract" : [
    {
      "text" : "A Nimble matcher for ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Spy",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " that succeeds when the most recent call to the spy is equal to the expected value.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "mostRecentlyBeCalled"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble7MatcherV",
      "text" : "Matcher"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes3SpyC",
      "text" : "Spy"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">>"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/mostRecentlyBeCalled(_:)-91ves",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "mostRecentlyBeCalled(_:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/mostrecentlybecalled(_:)-91ves"
},
"doc://Fakes/documentation/Fakes/mostRecentlyBeCalled(_:)-9i9t9": {
  "abstract" : [
    {
      "text" : "A Nimble matcher for ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/Spy",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " that succeeds when the most recent call to the spy matches the given matchers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "mostRecentlyBeCalled"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "genericParameter",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble7MatcherV",
      "text" : "Matcher"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ">...) -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:6Nimble7MatcherV",
      "text" : "Matcher"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Fakes3SpyC",
      "text" : "Spy"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Arguments"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Returning"
    },
    {
      "kind" : "text",
      "text" : ">>"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/documentation\/Fakes\/mostRecentlyBeCalled(_:)-9i9t9",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "mostRecentlyBeCalled(_:)",
  "type" : "topic",
  "url" : "\/documentation\/fakes\/mostrecentlybecalled(_:)-9i9t9"
},
"doc://Fakes/tutorials/WritingFakes": {
  "abstract" : [
    {
      "text" : "A tutorial showing you how to create and use a Fake, within the context",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "of testing network calls.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Fakes\/tutorials\/WritingFakes",
  "kind" : "overview",
  "role" : "overview",
  "title" : "Creating a Fake",
  "type" : "topic",
  "url" : "\/tutorials\/writingfakes"
},
"https://github.com/testdouble/contributing-tests/wiki/Subject": {
  "identifier" : "https:\/\/github.com\/testdouble\/contributing-tests\/wiki\/Subject",
  "title" : "Test Double’s description",
  "titleInlineContent" : [
    {
      "text" : "Test Double’s",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "description",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/testdouble\/contributing-tests\/wiki\/Subject"
}
}
}